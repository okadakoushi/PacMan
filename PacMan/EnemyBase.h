#pragma once

class PacMan;
class Wall;
class SceneGame;

class EnemyBase : public Actor
{
public:
	enum ENEMY_STATE
	{
		InPrisonMode = 1,	//牢獄内。
		GetOutPrisonMode,	//牢獄から出る。
		ScatterMode,		//散開。
		ChaseMode,			//追跡。
		ReturnPrisonMode,	//牢獄内帰還。
	};

protected:
	enum ANIMATION
	{
		LeftAnimation = 0,
		RightAnimation = 2,
		UpAnimation = 4,
		DownAnimation = 6,
		LeftEyeAnimation = 8,
		RightEyeAnimation,
		UpEyeAnimation,
		DownEyeAnimation,
		TweekAnimation = 12,
		NearEndTweekAnimation = 14,
		AnimationNum
	};

	enum DIRECTION
	{
		Direction_Left,
		Direction_Right,
		Direction_Up,
		Direction_Down
	};

protected:
	//移動速度。
	const double		TWEEK_TIME			= 8.0f;		//いじけモード時間。
	const float			STANDARD_MOVE_SPEED = 2.0f;		//通常時移動速度。
	const float			TWEEK_MOVE_SPEED	= 1.0f;		//いじけ時移動速度。
	const float			RETURN_PRISON_SPEED = 6.0f;		//牢獄帰還時のスピード。
	const float			GETOUT_PRISON_SPEED = 1.0f;		//牢獄から出る用のスピード。
	
	//位置。
	const Vector2		START_POINT;												//初期位置。
	const Vector2		PRISON_FRONT = { FIX_VALUE_X + 400.0f, FIX_VALUE_Y + 300.0f };	//牢獄の前。
	const Vector2		PRISON_POINT = { FIX_VALUE_X + 400.0f, FIX_VALUE_Y + 360.0f };	//牢獄の中。

	//ptrs。
	PacMan*				m_packManPtr = nullptr;					//パックマンポインタ。
	SceneGame*			m_sceneGame = nullptr;					//ゲーム。

	//アニメーション。
	static std::map<DIRECTION, ANIMATION> m_directionToNormalAnimHandleIndex;	//通常アニメーション
	static std::map<DIRECTION, ANIMATION> m_directionToEyeAnimHandleIndex;		//目玉のみアニメーション。
	const int AnimationSpeed = 5;								//アニメーションの切り替え速度(フレーム）。
	int m_drawHandle[AnimationNum] = { 0 };						//アニメーションすべてのDrawHandle。
	unsigned int m_animationIndex = 0;							//アニメーションのインデックス。これを使用して次に流すアニメーションを決める。
	int m_currentAnimation = 0;									//再生するアニメーション。
	int m_animationWaitFrame = 0;								//何フレームアニメーションを流したか。

	//移動用。
	Vector2_Int			m_direction = { 0, -1 };					//方向。
	Vector2				m_target = {504, 374};						//ターゲットの位置。
	Vector2				m_nextWayPoint = START_POINT;				//次のwayPoint。
	float				m_currentMoveSpeed = STANDARD_MOVE_SPEED;	//現在の移動速度。
	ENEMY_STATE			m_currentState = InPrisonMode;				//現在のステート。
	float				m_restMovePixcel = SPRITE_SIZE / 2.0f;		//残り移動可能ピクセル。

	//いじけモード用。
	double				m_tweekTimer = 0.0f;		//いじけモード用タイマー。
	bool				m_isTweek = false;			//いじけモードか。
	int					m_nearEndTweekFrame = 2;	//敵の点滅フレーム。
	bool				m_callDeadEvent = false;	//死亡用イベント

	//Sound
	int m_returnPrisonSE = 0;						//牢獄帰還。

public:
	EnemyBase(SceneBase* sceneBase, const char* tag, int prio, PacMan* packPtr, Vector2 startPos);
	virtual ~EnemyBase();

public:
	virtual void Init() override;
	virtual void Update() override;
	virtual void Draw() override;
	virtual void OnCollision(Actor* actor) override {};
	
	/// <summary>
	/// 衝突効果。
	/// </summary>
	/// <param name="actor"></param>
	void HitEffect(Actor* actor);

	/// <summary>
	/// 反転処理。
	/// </summary>
	void Turning();

	/// <summary>
	/// いじけモード時のイベント。
	/// </summary>
	void TweekEvent();
	
	/// <summary>
	/// 現在のステートを取得。
	/// </summary>
	/// <returns></returns>
	ENEMY_STATE GetCurrentState()
	{
		return m_currentState;
	}

	/// <summary>
	/// デッドイベントが呼ばれたか。
	/// </summary>
	/// <returns></returns>
	bool IsCallDeadEvent()
	{
		return m_callDeadEvent;
	}

	/// <summary>
	/// いじけモードか。
	/// </summary>
	/// <returns></returns>
	bool IsTweek()
	{
		return m_isTweek;
	}

	/// <summary>
	/// ターゲットを設定。
	/// </summary>
	/// <param name="target"></param>
	void SetTarget(Vector2& target)
	{
		m_target = target;
	}

	/// <summary>
	/// 死亡用イベントを設定。
	/// </summary>
	/// <param name="flag"></param>
	void SetDeadEvent(bool flag)
	{
		m_callDeadEvent = flag;
	}

	/// <summary>
	/// 現在のステートを変更。
	/// </summary>
	/// <param name="state"></param>
	void ChangeCurrentState(ENEMY_STATE state)
	{
		m_currentState = state;
	}

protected:	
	//マス目状にマップをみたときにどこに配置されているか。参照つけない。
	Vector2_Int GetPositionIndex(Vector2& pos)
	{
		Vector2 centerPos = { SCREEN_WIDTH / 2 , SCREEN_HEIGHT / 2 };
		Vector2 posIndex = pos - centerPos;
		posIndex = { (posIndex.x / SPRITE_SIZE), (posIndex.y / SPRITE_SIZE) };
		return EngineMath::ConvertToIntVec(posIndex);
	}

private:
	/// <summary>
	/// いじけモード時以外の経路検索。
	/// </summary>
	void WayPointSerch();

	/// <summary>
	/// いじけモード時用の経路検索。
	/// </summary>
	void WayPointSerchForTweekMode();

	/// <summary>
	/// 死亡時処理。
	/// </summary>
	void Death();

	/// <summary>
	/// 次の移動候補地点4点に対して、移動可能な場所を返す。
	/// <para>ローカル変数を返すため、戻り値を参照に変更しないでください。</para>
	/// </summary>
	/// <returns></returns>
	std::vector<Vector2> CanMoveNextWayPoint();

	/// <summary>
	/// アニメーションの更新。
	/// </summary>
	void AnimationUpdate();
};

